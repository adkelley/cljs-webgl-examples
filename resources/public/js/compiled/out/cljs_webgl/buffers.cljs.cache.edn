{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name cljs-webgl.buffers, :imports nil, :requires {texture-target cljs-webgl.constants.texture-target, cljs-webgl.constants.buffer-object cljs-webgl.constants.buffer-object, cljs-webgl.constants.clear-buffer-mask cljs-webgl.constants.clear-buffer-mask, texture-unit cljs-webgl.constants.texture-unit, cljs-webgl.constants.capability cljs-webgl.constants.capability, buffer-object cljs-webgl.constants.buffer-object, data-type cljs-webgl.constants.data-type, cljs-webgl.constants.texture-unit cljs-webgl.constants.texture-unit, shaders cljs-webgl.shaders, cljs-webgl.constants.data-type cljs-webgl.constants.data-type, capability cljs-webgl.constants.capability, clear-buffer cljs-webgl.constants.clear-buffer-mask, cljs-webgl.shaders cljs-webgl.shaders, cljs-webgl.typed-arrays cljs-webgl.typed-arrays, cljs-webgl.constants.texture-target cljs-webgl.constants.texture-target, ta cljs-webgl.typed-arrays}, :uses nil, :defs {set-uniform {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 73, :column 17, :end-line 73, :end-column 28, :private true, :arglists (quote ([gl-context shader {:keys [name type values transpose]}]))}, :private true, :name cljs-webgl.buffers/set-uniform, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :end-column 28, :method-params ([gl-context shader p__33882]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 3, :fn-var true, :arglists (quote ([gl-context shader {:keys [name type values transpose]}]))}, create-buffer {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 12, :column 7, :end-line 12, :end-column 20, :arglists (quote ([gl-context data target usage & [item-size]])), :doc "Creates a new buffer with initialized `data`.\n\n  `data` must be a typed-array\n\n  `target` may be `cljs-webgl.constants.buffer-object/array-buffer` or `cljs-webgl.constants.buffer-object/element-array-buffer`\n\n  `usage` may be `cljs-webgl.constants.buffer-object/static-draw` or `cljs-webgl.constants.buffer-object/dynamic-draw`\n\n  `item-size` [optional] will set the item size as an attribute on the buffer, and the calculate the number of items accordingly.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGenBuffers(Similar to createBuffer)](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffers.xml)\n  * [glBindBuffer](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml)\n  * [glBufferData](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferData.xml)", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(gl-context data target usage [item-size])], :arglists ([gl-context data target usage & [item-size]]), :arglists-meta (nil)}}, :name cljs-webgl.buffers/create-buffer, :variadic true, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(gl-context data target usage [item-size])], :arglists ([gl-context data target usage & [item-size]]), :arglists-meta (nil)}, :method-params [(gl-context data target usage [item-size])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 4, :fn-var true, :arglists ([gl-context data target usage & [item-size]]), :doc "Creates a new buffer with initialized `data`.\n\n  `data` must be a typed-array\n\n  `target` may be `cljs-webgl.constants.buffer-object/array-buffer` or `cljs-webgl.constants.buffer-object/element-array-buffer`\n\n  `usage` may be `cljs-webgl.constants.buffer-object/static-draw` or `cljs-webgl.constants.buffer-object/dynamic-draw`\n\n  `item-size` [optional] will set the item size as an attribute on the buffer, and the calculate the number of items accordingly.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glGenBuffers(Similar to createBuffer)](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffers.xml)\n  * [glBindBuffer](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml)\n  * [glBufferData](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferData.xml)"}, default-capabilities {:name cljs-webgl.buffers/default-capabilities, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 134, :column 1, :end-line 134, :end-column 36, :private true, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 134, :column 16, :end-line 134, :end-column 36, :private true}}, set-texture {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 114, :column 17, :end-line 114, :end-column 28, :private true, :arglists (quote ([gl-context shader {:keys [texture name texture-unit]}]))}, :private true, :name cljs-webgl.buffers/set-texture, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :end-column 28, :method-params ([gl-context shader p__33895]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 3, :fn-var true, :arglists (quote ([gl-context shader {:keys [texture name texture-unit]}]))}, set-capability {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 145, :column 17, :end-line 145, :end-column 31, :private true, :arglists (quote ([gl-context capability enabled?])), :doc "Enables/disables acording to `enabled?` a given server-side GL `capability`\n\n   The valid values for `capability` are: `cljs-webgl.constants.capability/blend`,\n   `cljs-webgl.constants.capability/cull-face`, `cljs-webgl.constants.capability/depth-test`, `cljs-webgl.constants.capability/dither`,\n   `cljs-webgl.constants.capability/polygon-offset-fill`, `cljs-webgl.constants.capability/sample-alpha-to-coverage`,\n   `cljs-webgl.constants.capability/sample-coverage`, `cljs-webgl.constants.capability/scissor-test`,\n   `cljs-webgl.constants.capability/stencil-test`\n\n   Relevant OpenGL ES reference pages:\n\n   * [glEnable](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml)\n   * [glDisable](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glDisable.xml)"}, :private true, :name cljs-webgl.buffers/set-capability, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :end-column 31, :method-params ([gl-context capability enabled?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 3, :fn-var true, :arglists (quote ([gl-context capability enabled?])), :doc "Enables/disables acording to `enabled?` a given server-side GL `capability`\n\n   The valid values for `capability` are: `cljs-webgl.constants.capability/blend`,\n   `cljs-webgl.constants.capability/cull-face`, `cljs-webgl.constants.capability/depth-test`, `cljs-webgl.constants.capability/dither`,\n   `cljs-webgl.constants.capability/polygon-offset-fill`, `cljs-webgl.constants.capability/sample-alpha-to-coverage`,\n   `cljs-webgl.constants.capability/sample-coverage`, `cljs-webgl.constants.capability/scissor-test`,\n   `cljs-webgl.constants.capability/stencil-test`\n\n   Relevant OpenGL ES reference pages:\n\n   * [glEnable](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml)\n   * [glDisable](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glDisable.xml)"}, clear-stencil-buffer {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 61, :column 7, :end-line 61, :end-column 27, :arglists (quote ([gl-context index])), :doc "Clears the stencil buffer with specified `index` value.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glClearStencil](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearStencil.xml)\n  * [glClear](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml)"}, :name cljs-webgl.buffers/clear-stencil-buffer, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :end-column 27, :method-params ([gl-context index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([gl-context index])), :doc "Clears the stencil buffer with specified `index` value.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glClearStencil](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearStencil.xml)\n  * [glClear](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml)"}, clear-color-buffer {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 37, :column 7, :end-line 37, :end-column 25, :arglists (quote ([gl-context red green blue alpha])), :doc "Clears the color buffer with specified `red`, `green`, `blue` and `alpha` values.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glClearColor](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearColor.xml)\n  * [glClear](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml)"}, :name cljs-webgl.buffers/clear-color-buffer, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :end-column 25, :method-params ([gl-context red green blue alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 5, :fn-var true, :arglists (quote ([gl-context red green blue alpha])), :doc "Clears the color buffer with specified `red`, `green`, `blue` and `alpha` values.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glClearColor](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearColor.xml)\n  * [glClear](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml)"}, set-attribute {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 94, :column 17, :end-line 94, :end-column 30, :private true, :arglists (quote ([gl-context {:keys [buffer location components-per-vertex type normalized? stride offset]}]))}, :private true, :name cljs-webgl.buffers/set-attribute, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :end-column 30, :method-params ([gl-context p__33890]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([gl-context {:keys [buffer location components-per-vertex type normalized? stride offset]}]))}, draw! {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 165, :column 7, :end-line 165, :end-column 12, :arglists (quote ([gl-context & {:keys [shader draw-mode first count attributes uniforms textures element-array capabilities], :as opts}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(gl-context {:keys [shader draw-mode first count attributes uniforms textures element-array capabilities], :as opts})], :arglists ([gl-context & {:keys [shader draw-mode first count attributes uniforms textures element-array capabilities], :as opts}]), :arglists-meta (nil)}}, :name cljs-webgl.buffers/draw!, :variadic true, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(gl-context {:keys [shader draw-mode first count attributes uniforms textures element-array capabilities], :as opts})], :arglists ([gl-context & {:keys [shader draw-mode first count attributes uniforms textures element-array capabilities], :as opts}]), :arglists-meta (nil)}, :method-params [(gl-context {:keys [shader draw-mode first count attributes uniforms textures element-array capabilities], :as opts})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists ([gl-context & {:keys [shader draw-mode first count attributes uniforms textures element-array capabilities], :as opts}])}, clear-depth-buffer {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :line 49, :column 7, :end-line 49, :end-column 25, :arglists (quote ([gl-context depth])), :doc "Clears the depth buffer with specified `depth` value.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glClearDepthf](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearDepthf.xml)\n  * [glClear](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml)"}, :name cljs-webgl.buffers/clear-depth-buffer, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/buffers.cljs", :end-column 25, :method-params ([gl-context depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([gl-context depth])), :doc "Clears the depth buffer with specified `depth` value.\n\n  Relevant OpenGL ES reference pages:\n\n  * [glClearDepthf](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearDepthf.xml)\n  * [glClear](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml)"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:capabilities :offset :uniforms :transpose :name :element-array :type :normalized? :components-per-vertex :values :count :draw-mode :textures :first :attributes :location :texture-unit :stride :texture :shader :buffer}, :order [:name :type :values :transpose :buffer :location :components-per-vertex :normalized? :stride :offset :texture :texture-unit :shader :draw-mode :first :count :attributes :uniforms :textures :element-array :capabilities]}, :doc nil}