{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name cljs-webgl.context, :imports nil, :requires nil, :uses nil, :defs {get-context {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/context.cljs", :line 4, :column 7, :end-line 4, :end-column 18, :arglists (quote ([canvas-element] [canvas-element context-attributes])), :doc "Gets a WebGL context from a canvas element.\n`context-attributes` may be a map in the following form:\n\n    {:alpha\n     :depth\n     :stencil\n     :antialias\n     :premultiplied-apha\n     :preserve-drawing-buffer}\nIf you don't specify any key, the default value is assumed.\n\nFor further information on context creation parameters see [WebGLContextAttributes](https://www.khronos.org/registry/webgl/specs/1.0.2/#WEBGLCONTEXTATTRIBUTES);", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([canvas-element] [canvas-element context-attributes]), :arglists ([canvas-element] [canvas-element context-attributes]), :arglists-meta (nil nil)}}, :name cljs-webgl.context/get-context, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/context.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([canvas-element] [canvas-element context-attributes]), :arglists ([canvas-element] [canvas-element context-attributes]), :arglists-meta (nil nil)}, :method-params ([canvas-element] [canvas-element context-attributes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists ([canvas-element] [canvas-element context-attributes]), :doc "Gets a WebGL context from a canvas element.\n`context-attributes` may be a map in the following form:\n\n    {:alpha\n     :depth\n     :stencil\n     :antialias\n     :premultiplied-apha\n     :preserve-drawing-buffer}\nIf you don't specify any key, the default value is assumed.\n\nFor further information on context creation parameters see [WebGLContextAttributes](https://www.khronos.org/registry/webgl/specs/1.0.2/#WEBGLCONTEXTATTRIBUTES);"}, get-context-attributes {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/context.cljs", :line 39, :column 7, :end-line 39, :end-column 29, :arglists (quote ([gl-context])), :doc "Returns the actual context parameters for a created context. The returned map has the following form:\n\n    {:alpha\n     :depth\n     :stencil\n     :antialias\n     :premultiplied-apha\n     :preserve-drawing-buffer}\n\nThis function is helpful for testing if the requested parameters were satisfied."}, :name cljs-webgl.context/get-context-attributes, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/context.cljs", :end-column 29, :method-params ([gl-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gl-context])), :doc "Returns the actual context parameters for a created context. The returned map has the following form:\n\n    {:alpha\n     :depth\n     :stencil\n     :antialias\n     :premultiplied-apha\n     :preserve-drawing-buffer}\n\nThis function is helpful for testing if the requested parameters were satisfied."}, get-canvas {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/context.cljs", :line 60, :column 7, :end-line 60, :end-column 17, :arglists (quote ([gl-context])), :doc "Returns the canvas element from the given WebGL context."}, :name cljs-webgl.context/get-canvas, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/context.cljs", :end-column 17, :method-params ([gl-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gl-context])), :doc "Returns the canvas element from the given WebGL context."}, get-drawing-buffer-width {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/context.cljs", :line 70, :column 7, :end-line 70, :end-column 31, :arglists (quote ([gl-context])), :doc "Returns the buffer current width."}, :name cljs-webgl.context/get-drawing-buffer-width, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/context.cljs", :end-column 31, :method-params ([gl-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gl-context])), :doc "Returns the buffer current width."}, get-drawing-buffer-height {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/context.cljs", :line 75, :column 7, :end-line 75, :end-column 32, :arglists (quote ([gl-context])), :doc "Returns the buffer current height."}, :name cljs-webgl.context/get-drawing-buffer-height, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/context.cljs", :end-column 32, :method-params ([gl-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gl-context])), :doc "Returns the buffer current height."}, is-context-lost? {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/context.cljs", :line 80, :column 7, :end-line 80, :end-column 23, :arglists (quote ([gl-context])), :doc "Returns whether the context was lost.\n\n  See [The Context Lost Event](http://www.khronos.org/registry/webgl/specs/1.0/#CONTEXT_LOST)"}, :name cljs-webgl.context/is-context-lost?, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/context.cljs", :end-column 23, :method-params ([gl-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gl-context])), :doc "Returns whether the context was lost.\n\n  See [The Context Lost Event](http://www.khronos.org/registry/webgl/specs/1.0/#CONTEXT_LOST)"}, get-supported-extensions {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/context.cljs", :line 87, :column 7, :end-line 87, :end-column 31, :arglists (quote ([gl-context])), :doc "Returns a string sequence containing the name for each supported extension"}, :name cljs-webgl.context/get-supported-extensions, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/context.cljs", :end-column 31, :method-params ([gl-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gl-context])), :doc "Returns a string sequence containing the name for each supported extension"}, get-extension {:protocol-inline nil, :meta {:file "/Users/alexkelley/Dropbox/cs/webgl/cljs-webgl-examples/resources/public/js/compiled/out/cljs_webgl/context.cljs", :line 92, :column 7, :end-line 92, :end-column 20, :arglists (quote ([gl-context extension-name])), :doc "Returns the object for the requested extension. The returned value is not wrapped in any ClojureScript construct."}, :name cljs-webgl.context/get-extension, :variadic false, :file "resources/public/js/compiled/out/cljs_webgl/context.cljs", :end-column 20, :method-params ([gl-context extension-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([gl-context extension-name])), :doc "Returns the object for the requested extension. The returned value is not wrapped in any ClojureScript construct."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:preserve-drawing-buffer :antialias :premultipliedAlpha :premultiplied-alpha :preserveDrawingBuffer :alpha :depth :stencil}, :order [:alpha :depth :stencil :antialias :premultiplied-alpha :preserve-drawing-buffer :premultipliedAlpha :preserveDrawingBuffer]}, :doc nil}